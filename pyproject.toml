[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=66",
    "wheel>=0.36"
]

[project]
authors = [
  {email = "hello@futurehouse.org", name = "FutureHouse technical staff"}
]
dependencies = [
  "aiodocker",
  "fhaviary[server] >= 0.18.0",
  "ldp",
  "pandas",
  "numpy",
  "matplotlib",
  "scipy",
  "seaborn",
  "scikit-learn",
  "statsmodels",
  "aiofiles",
  "google-auth",
  "google-cloud-storage",
  "google-cloud-secret-manager",
  "crow-client >= 0.3.4",
  "jupyter",
  "nbconvert",
  "notebook",
  "nbformat",
  "fhlmi",
  "pydantic~=2.0",
  "datasets",
  "pandas",
  "python-dotenv",
  "huggingface-hub"
]
description = "BixBench"
name = "fhbixbench"
requires-python = ">=3.12"
version = "0.0.1"

[project.optional-dependencies]
dev = [
  "black",
  "isort",
  "mypy",
  "pre-commit",
  "pytest",
  "pytest-asyncio",
  "pytest-cov",
  "ruff"
]

[project.scripts]
run_expt = 'scripts.configurable:_run_expt'

[tool.setuptools]
package-dir = {"" = "bixbench"}

[tool.setuptools.packages.find]
where = ["bixbench"]

[tool.refurb]
enable_all = true
ignore = [
    "FURB101",  # FURB101, FURB103, FURB141, FURB144, FURB146, FURB147, FURB150, FURB155: no need for pathlib
    "FURB103",
    "FURB118",  # We often use inspect.signature in FxnOp. In 3.11, this doesn't work on operator.itemgetter.
    "FURB141",
    "FURB144",
    "FURB146",
    "FURB147",
    "FURB150",
    "FURB155",
]

[tool.ruff]
# Line length to use when enforcing long-lines violations (like `E501`).
line-length = 88
# The minimum Python version to target, e.g., when considering automatic code
# upgrades, like rewriting type annotations. Ruff will not propose changes
# using features that are not available in the given version.
target-version = "py311"
# Enable application of unsafe fixes.
unsafe-fixes = true

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true
# Enable preview style formatting.
preview = true

[tool.ruff.lint]
explicit-preview-rules = true
extend-select = [
    "A005",
    "A006",
    "ASYNC116",
    "B901",
    "B909",
    "C420",
    "DOC202",
    "DOC403",
    "DTZ901",
    "E111",
    "E112",
    "E113",
    "E114",
    "E115",
    "E116",
    "E117",
    "E201",
    "E202",
    "E203",
    "E204",
    "E211",
    "E221",
    "E222",
    "E223",
    "E224",
    "E225",
    "E226",
    "E227",
    "E228",
    "E231",
    "E241",
    "E242",
    "E251",
    "E252",
    "E261",
    "E262",
    "E265",
    "E266",
    "E271",
    "E272",
    "E273",
    "E274",
    "E275",
    "E301",
    "E302",
    "E303",
    "E304",
    "E305",
    "E306",
    "E502",
    "FURB101",
    "FURB103",
    "FURB110",
    "FURB113",
    "FURB116",
    "FURB118",
    "FURB131",
    "FURB132",
    "FURB140",
    "FURB142",
    "FURB145",
    "FURB148",
    "FURB152",
    "FURB154",
    "FURB156",
    "FURB157",
    "FURB164",
    "FURB166",
    "FURB171",
    "FURB180",
    "FURB188",
    "FURB189",
    "FURB192",
    "LOG015",
    "PLC1901",
    "PLC2801",
    "PLE0304",
    "PLE1141",
    "PLE4703",
    "PLR6201",
    "PLW0108",
    "PYI059",
    "RUF027",
    "RUF028",
    "RUF031",
    "RUF032",
    "RUF033",
    "RUF034",
    "RUF035",
    "RUF036",
    "RUF038",
    "RUF039",
    "RUF048",
    "SIM905",
    "UP042",
    "UP044",
    "W391",
]
external = [
    "FURB",  # refurb
]
# List of rule codes that are unsupported by Ruff, but should be preserved when
# (e.g.) validating # noqa directives. Useful for retaining # noqa directives
# that cover plugins not yet implemented by Ruff.
ignore = [
    "A005",  # Overly pedantic
    "ANN",  # Don't care to enforce typing
    "ARG002",  # Thrown all the time when we are subclassing
    "ARG003",  # Thrown all the time when we are subclassing
    "ASYNC109",  # Buggy, SEE: https://github.com/astral-sh/ruff/issues/12353
    "ASYNC2",  # It's ok to mix async and sync ops (like opening a file)
    "B027",  # Very common to have an empty method in a base class
    "BLE001",  # Don't care to enforce blind exception catching
    "COM812",  # Trailing comma with black leads to wasting lines
    "D100",  # D100, D101, D102, D103, D104, D105, D106, D107: don't always need docstrings
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D203",  # Keep docstring next to the class definition (covered by D211)
    "D212",  # Summary should be on second line (opposite of D213)
    "D402",  # It's nice to reuse the method name
    "D406",  # Google style requires ":" at end
    "D407",  # We aren't using numpy style
    "D413",  # Blank line after last section. -> No blank line
    "DTZ",  # Don't care to have timezone safety
    "EM",  # Overly pedantic
    "ERA001",  # Don't care to prevent commented code
    "FBT001",  # FBT001, FBT002: overly pedantic
    "FBT002",
    "FIX",  # Don't care to prevent TODO, FIXME, etc.
    "FLY002",  # Can be less readable
    "G004",  # f-strings are convenient
    "INP001",  # Can use namespace packages
    "ISC001",  # For ruff format compatibility
    "N803",  # Allow matching math formula names/conventions
    "N806",  # Allow matching math formula names/conventions
    "PLC0415",  # Don't care to prevent imports outside of top-level
    "PLR0912",  # Allow us to have lots of branches
    "PLR0913",
    "PLR6104",  # Moving to __iadd__ risks ldp graph manipulation
    "PLW2901",  # Allow modifying loop variables
    "PTH",  # Overly pedantic
    "RUF027",  # Prompt templates may not be f-strings
    "S101",  # Don't care to prevent asserts
    "S105",  # Duplicates Yelp/detect-secrets in pre-commit
    "S311",  # Ok to use python random
    "SLF001",  # Overly pedantic
    "T201",  # Overly pedantic
    "TC001",  # TC001, TC002, TC003: don't care to enforce type checking blocks
    "TC002",
    "TC003",
    "TD002",  # Don't care for TODO author
    "TD003",  # Don't care for TODO links
    "TRY003",  # Overly pedantic
]
preview = true
select = ["ALL"]
unfixable = [
    "B007",  # While debugging, unused loop variables can be useful
    "B905",  # Default fix is zip(strict=False), but that can hide bugs
    "ERA001",  # While debugging, temporarily commenting code can be useful
    "F401",  # While debugging, unused imports can be useful
    "F841",  # While debugging, unused locals can be useful
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.per-file-ignores]
"**/tests/*.py" = [
    "E501",  # Tests can have long strings
    "F841",  # Tests can have unused locals
    "N802",  # Tests function names can match class names
    "PLR2004",  # Tests can have magic values
    "S301",  # Tests can have pickle
]
"docs/**.ipynb" = [
    "PLE1142",  # allow async
    "PLR2004",  # allow magic values
]

[tool.ruff.lint.pycodestyle]
# The maximum line length to allow for line-length violations within
# documentation (W505), including standalone comments.
max-doc-length = 120  # Match line-length
# The maximum line length to allow for line-too-long violations. By default,
# this is set to the value of the line-length option.
max-line-length = 120

[tool.ruff.lint.pydocstyle]
# Whether to use Google-style or NumPy-style conventions or the PEP257
# defaults when analyzing docstring sections.
convention = "google"